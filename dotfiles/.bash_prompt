#!/bin/bash
#
# DESCRIPTION:
#
#   Set the bash prompt according to:
#    * the active virtualenv
#    * the branch/status of the current git repository
#    * the return value of the previous command
#    * the fact you just came from Windows and are used to having newlines in
#      your prompts.
#
# USAGE:
#
#   1. Save this file as ~/.bash_prompt
#   2. Add the following line to the end of your ~/.bashrc or ~/.bash_profile:
#        . ~/.bash_prompt
#
# LINEAGE:
#
#   Based on work by woods
#
#   https://gist.github.com/31967

# The various escape codes that we can use to color our prompt.
        RED="\[\033[38;5;124m\]"
     YELLOW="\[\033[1;33m\]"
PALE_YELLOW="\[\033[38;5;178m\]"
      GREEN="\[\e[32m\]"
       BLUE="\[\e[34m\]"
 LIGHT_BLUE="\[\033[38;5;114m\]"
  LIGHT_RED="\[\033[1;31m\]"
  PALE_BLUE="\[\033[38;5;67m\]"
   DEEP_RED="\[\033[38;5;167m\]"
LIGHT_GREEN="\[\033[1;32m\]"
     PURPLE="\[\033[38;5;127m\]"
      WHITE="\[\033[1;37m\]"
 LIGHT_GRAY="\[\033[0;37m\]"
 COLOR_NONE="\[\e[0m\]"

# Detect whether the current directory is a git repository.
function is_git_repository {
  git branch > /dev/null 2>&1
}

# get current status of git repo
function parse_git_dirty {
	status=`git status 2>&1 | tee`
	dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
	untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
	newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
	renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
	deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
	bits=""
	if [ "${renamed}" == "0" ]; then
    bits_color="${PALE_YELLOW}"
		bits="${bits_color}>${bits}${COLOR_NONE}"
	fi
	if [ "${newfile}" == "0" ]; then
    bits_color="${BLUE}"
		bits="${bits_color}+${bits}${COLOR_NONE}"
	fi
	if [ "${untracked}" == "0" ]; then
    bits_color="${LIGHT_GREEN}"
		bits="${bits_color}?${bits}${COLOR_NONE}"
	fi
	if [ "${deleted}" == "0" ]; then
    bits_color="${LIGHT_RED}"
		bits="${bits_color}x${bits}${COLOR_NONE}"
	fi
	if [ "${dirty}" == "0" ]; then
    bits_color="${LIGHT_BLUE}"
		bits="${bits_color}!${bits}${COLOR_NONE}"
	fi
}


# Determine the branch/state information for this git repository.
function set_git_branch {
  # Capture the output of the "git status" command.
  git_status="$(git status 2> /dev/null)"
  # Set color based on clean/staged/dirty.
  if [[ ${git_status} =~ "working tree clean" ]]; then
    state="✔️  ${GREEN}"
  elif [[ ${git_status} =~ "Changes to be committed" ]]; then
    state="${PALE_YELLOW}"
  else
    state="${LIGHT_BLUE}"
  fi

  # Set arrow icon based on status against remote.
  ahead_pattern=`git status 2>&1 | tee | grep ahead &>/dev/null; echo "$?"`
  behing_pattern=`git status 2>&1 | tee | grep behind &>/dev/null; echo "$?"`
  diverge_pattern=`git status 2>&1 | tee | grep diverged &>/dev/null; echo "$?"`
  remote=""
  if [[ "${ahead_pattern}" == "0" ]]; then
    remote="↑"
  fi
  if [[ "${behing_pattern}" == "0" ]]; then
    remote="↓"
  fi
  if [[ "${diverge_pattern}" == "0" ]]; then
    remote="↕"
  fi

  # Get the name of the branch.
  branch_pattern="^(# )?On branch ([^${IFS}]*)"
  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[2]}
  fi

  # Set the final branch string.
  BRANCH="${state}(${branch})${COLOR_NONE}${remote}${COLOR_NONE} "
}

# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function set_prompt_symbol () {
  if test $1 -eq 0 ; then
      PROMPT_SYMBOL="\$ >"
  else
      PROMPT_SYMBOL="${LIGHT_RED}\$ >${COLOR_NONE}"
  fi
}

# Determine active Python virtualenv details.
function set_virtualenv () {
  if test -z "$VIRTUAL_ENV" ; then
      PYTHON_VIRTUALENV=""
  else
      PYTHON_VIRTUALENV="${DEEP_RED}[`basename \"$VIRTUAL_ENV\"`]${COLOR_NONE} "
  fi
}

# Determine active Python virtualenv details.
function set_condaenv () {
  if test -z "$CONDA_DEFAULT_ENV" ; then
      CONDA_ENV=""
  else
      CONDA_ENV="${DEEP_RED}[`basename \"$CONDA_DEFAULT_ENV\"`]${COLOR_NONE} "
  fi
}


# Set the full bash prompt.
function set_bash_prompt () {
  # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
  # return value of the last command.
  set_prompt_symbol $?

  # Set the PYTHON_VIRTUALENV variable.
  set_virtualenv
  set_condaenv

  # Set the BRANCH variable.
  if is_git_repository ; then
    set_git_branch
    parse_git_dirty
  else
    BRANCH=''
  fi

  # Set the bash prompt variable.
  PS1="
${CONDA_ENV}${PYTHON_VIRTUALENV}${COLOR_NONE}\u ${PALE_BLUE}\w ${COLOR_NONE}${BRANCH}${bits}
${PROMPT_SYMBOL} "
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt
